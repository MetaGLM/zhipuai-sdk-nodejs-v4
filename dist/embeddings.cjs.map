{"version":3,"sources":["../lib/embeddings.ts","../lib/baseApi.ts"],"sourcesContent":["import BaseApi from \"./baseApi\";\n\nexport type CreateEmbeddingsOptions = {\n    input: Array<any> | string,\n    model: string,\n    encodingFormat: string,\n    user: string,\n    sensitiveWordCheck: object,\n    extraHeaders?: object,\n    timeout?: number,\n}\n\nexport type EmbeddingsResponse = {\n    model: string,\n    data: Array<{\n        index: number,\n        object: string,\n        embedding: Array<any>\n    }>,\n    object: string,\n    usage: {\n        prompt_tokens: number,\n        completion_tokens: number,\n        total_tokens: number\n    }\n}\n\nexport default class Embeddings extends BaseApi<CreateEmbeddingsOptions, EmbeddingsResponse> {\n    public async create(options: CreateEmbeddingsOptions): Promise<EmbeddingsResponse> {\n        return this.post(\"/embeddings\", {\n            \"input\": options.input,\n            \"model\": options.model,\n            \"encoding_format\": options.encodingFormat,\n            \"user\": options.user,\n            \"sensitive_word_check\": options.sensitiveWordCheck,\n        }, options)\n    }\n} ","import { AxiosResponse } from \"axios\";\nimport Request from \"./request\";\n\n\nexport type moreRequestOptions = {\n    extraHeaders?: object,\n    timeout?: number,\n    stream?: boolean\n}\n\nexport default class BaseApi<Options, Response> {\n    constructor(private readonly request: Request) {\n    }\n\n    public async post(url: string, data: object, options: Options & moreRequestOptions): Promise<Response | any> {\n        return this.request.post(url, data, {\n            headers: options.extraHeaders,\n            timeout: options.timeout,\n            responseType: options.stream ? 'stream' : 'json'\n        })\n            .catch(err => {\n                const data = err.response.data as Response\n                return Promise.reject(data)\n            })\n    }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACUA,IAAqB,UAArB,MAAgD;AAAA,EAC5C,YAA6B,SAAkB;AAAlB;AAAA,EAC7B;AAAA,EAEa,KAAK,KAAa,MAAc,SAAgE;AAAA;AACzG,aAAO,KAAK,QAAQ,KAAK,KAAK,MAAM;AAAA,QAChC,SAAS,QAAQ;AAAA,QACjB,SAAS,QAAQ;AAAA,QACjB,cAAc,QAAQ,SAAS,WAAW;AAAA,MAC9C,CAAC,EACI,MAAM,SAAO;AACV,cAAMA,QAAO,IAAI,SAAS;AAC1B,eAAO,QAAQ,OAAOA,KAAI;AAAA,MAC9B,CAAC;AAAA,IACT;AAAA;AACJ;;;ADEA,IAAqB,aAArB,cAAwC,QAAqD;AAAA,EAC5E,OAAO,SAA+D;AAAA;AAC/E,aAAO,KAAK,KAAK,eAAe;AAAA,QAC5B,SAAS,QAAQ;AAAA,QACjB,SAAS,QAAQ;AAAA,QACjB,mBAAmB,QAAQ;AAAA,QAC3B,QAAQ,QAAQ;AAAA,QAChB,wBAAwB,QAAQ;AAAA,MACpC,GAAG,OAAO;AAAA,IACd;AAAA;AACJ;","names":["data"]}