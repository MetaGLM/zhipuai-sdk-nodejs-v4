{"version":3,"sources":["../lib/baseApi.ts","../lib/completions.ts"],"sourcesContent":["import { AxiosResponse } from \"axios\";\nimport Request from \"./request\";\n\n\nexport type moreRequestOptions = {\n    extraHeaders?: object,\n    timeout?: number,\n    stream?: boolean\n}\n\nexport default class BaseApi<Options, Response> {\n    constructor(private readonly request: Request) {\n    }\n\n    public async post(url: string, data: object, options: Options & moreRequestOptions): Promise<Response | any> {\n        return this.request.post(url, data, {\n            headers: options.extraHeaders,\n            timeout: options.timeout,\n            responseType: options.stream ? 'stream' : 'json'\n        })\n            .catch(err => {\n                const data = err.response.data as Response\n                return Promise.reject(data)\n            })\n    }\n} ","import BaseApi from \"./baseApi\";\n\nexport type MessageOptions = {\n    role: \"system\" | \"user\" | \"assistant\" | \"function\"\n    content: string\n}\n\nexport type CreateCompletionsOptions = {\n    model: string,\n    messages: Array<MessageOptions>,\n    requestId?: string,\n    doSample?: boolean,\n    stream?: boolean,\n    temperature?: number,\n    topP?: number,\n    maxTokens?: number,\n    seed?: number,\n    stop?: Array<string>,\n    sensitiveWordCheck?: object,\n    tools?: object,\n    toolChoice?: string,\n    extraHeaders?: object,\n    timeout?: number,\n}\n\nexport type CompletionsResponseMessage = {\n    id: string,\n    created: number,\n    model: string,\n    choices: Array<{\n        index: number,\n        finish_reason: string,\n        message: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        },\n        delta: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        }\n    }>,\n    usage: {\n        prompt_tokens: number,\n        completion_tokens: number,\n        total_tokens: number,\n    },\n}\n\nexport default class Completions extends BaseApi<CreateCompletionsOptions, CompletionsResponseMessage> {\n\n    public async create(options: CreateCompletionsOptions): Promise<CompletionsResponseMessage> {\n        return this.post(\"/chat/completions\", {\n            \"model\": options.model,\n            \"request_id\": options.requestId,\n            \"temperature\": options.temperature,\n            \"top_p\": options.topP,\n            \"do_sample\": options.doSample,\n            \"max_tokens\": options.maxTokens,\n            \"seed\": options.seed,\n            \"messages\": options.messages,\n            \"stop\": options.stop,\n            \"sensitive_word_check\": options.sensitiveWordCheck,\n            \"stream\": options.stream,\n            \"tools\": options.tools,\n            \"tool_choice\": options.toolChoice,\n        }, options)\n    }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAUA,IAAqB,UAArB,MAAgD;AAAA,EAC5C,YAA6B,SAAkB;AAAlB;AAAA,EAC7B;AAAA,EAEa,KAAK,KAAa,MAAc,SAAgE;AAAA;AACzG,aAAO,KAAK,QAAQ,KAAK,KAAK,MAAM;AAAA,QAChC,SAAS,QAAQ;AAAA,QACjB,SAAS,QAAQ;AAAA,QACjB,cAAc,QAAQ,SAAS,WAAW;AAAA,MAC9C,CAAC,EACI,MAAM,SAAO;AACV,cAAMA,QAAO,IAAI,SAAS;AAC1B,eAAO,QAAQ,OAAOA,KAAI;AAAA,MAC9B,CAAC;AAAA,IACT;AAAA;AACJ;;;ACuCA,IAAqB,cAArB,cAAyC,QAA8D;AAAA,EAEtF,OAAO,SAAwE;AAAA;AACxF,aAAO,KAAK,KAAK,qBAAqB;AAAA,QAClC,SAAS,QAAQ;AAAA,QACjB,cAAc,QAAQ;AAAA,QACtB,eAAe,QAAQ;AAAA,QACvB,SAAS,QAAQ;AAAA,QACjB,aAAa,QAAQ;AAAA,QACrB,cAAc,QAAQ;AAAA,QACtB,QAAQ,QAAQ;AAAA,QAChB,YAAY,QAAQ;AAAA,QACpB,QAAQ,QAAQ;AAAA,QAChB,wBAAwB,QAAQ;AAAA,QAChC,UAAU,QAAQ;AAAA,QAClB,SAAS,QAAQ;AAAA,QACjB,eAAe,QAAQ;AAAA,MAC3B,GAAG,OAAO;AAAA,IACd;AAAA;AACJ;","names":["data"]}