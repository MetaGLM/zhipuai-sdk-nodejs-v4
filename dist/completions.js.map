{"version":3,"sources":["../lib/completions.ts"],"sourcesContent":["import { AxiosResponse } from \"axios\";\nimport ZhipuAI from \"./zhipu-ai.js\";\n\nexport type MessageOptions = {\n    role: \"system\" | \"user\" | \"assistant\" | \"function\"\n    content: string\n}\n\nexport type CreateCompletionsOptions = {\n    model: string,\n    messages: Array<MessageOptions>,\n    requestId?: string,\n    doSample?: boolean,\n    stream?: boolean,\n    temperature?: number,\n    topP?: number,\n    maxTokens?: number,\n    seed?: number,\n    stop?: Array<string>,\n    sensitiveWordCheck?: object,\n    tools?: object,\n    toolChoice?: string,\n    extraHeaders?: object,\n    disableStrictValidation?: boolean,\n    timeout?: number,\n}\n\nexport type ResponseMessage = {\n    id: string,\n    created: number,\n    model: string,\n    choices: Array<{\n        index: number,\n        finish_reason: string,\n        message: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        },\n        delta: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        }\n    }>,\n    usage: {\n        prompt_tokens: number,\n        completion_tokens: number,\n        total_tokens: number,\n    },\n}\n\nexport default class Completions {\n    constructor(private readonly app: ZhipuAI) {\n    }\n\n    public async create(options: CreateCompletionsOptions): Promise<AxiosResponse<ResponseMessage>> {\n        return this.app.post(\"/chat/completions\", {\n            \"model\": options.model,\n            \"request_id\": options.requestId,\n            \"temperature\": options.temperature,\n            \"top_p\": options.topP,\n            \"do_sample\": options.doSample,\n            \"max_tokens\": options.maxTokens,\n            \"seed\": options.seed,\n            \"messages\": options.messages,\n            \"stop\": options.stop,\n            \"sensitive_word_check\": options.sensitiveWordCheck,\n            \"stream\": options.stream,\n            \"tools\": options.tools,\n            \"tool_choice\": options.toolChoice,\n        }, {\n            headers: options.extraHeaders,\n            responseType: options.stream ? 'stream' : 'json'\n        })\n    }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAkEA,IAAqB,cAArB,MAAiC;AAAA,EAC7B,YAA6B,KAAc;AAAd;AAAA,EAC7B;AAAA,EAEa,OAAO,SAA4E;AAAA;AAC5F,aAAO,KAAK,IAAI,KAAK,qBAAqB;AAAA,QACtC,SAAS,QAAQ;AAAA,QACjB,cAAc,QAAQ;AAAA,QACtB,eAAe,QAAQ;AAAA,QACvB,SAAS,QAAQ;AAAA,QACjB,aAAa,QAAQ;AAAA,QACrB,cAAc,QAAQ;AAAA,QACtB,QAAQ,QAAQ;AAAA,QAChB,YAAY,QAAQ;AAAA,QACpB,QAAQ,QAAQ;AAAA,QAChB,wBAAwB,QAAQ;AAAA,QAChC,UAAU,QAAQ;AAAA,QAClB,SAAS,QAAQ;AAAA,QACjB,eAAe,QAAQ;AAAA,MAC3B,GAAG;AAAA,QACC,SAAS,QAAQ;AAAA,QACjB,cAAc,QAAQ,SAAS,WAAW;AAAA,MAC9C,CAAC;AAAA,IACL;AAAA;AACJ;","names":[]}