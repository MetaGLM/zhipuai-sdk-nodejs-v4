{"version":3,"sources":["../lib/zhipu-ai.ts","../lib/jwt.ts","../lib/completions.ts","../lib/request.ts"],"sourcesContent":["import assert from \"assert\"\nimport { generateToken } from \"./jwt.js\"\nimport Axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\"\nimport Completions, { CreateCompletionsOptions } from \"./completions.js\"\nimport Request from \"./request.js\"\n\nexport type ZhipuAIOptions = {\n    apiKey: string,\n    baseUrl?: string,\n    timeout?: number,\n    maxRetries?: number,\n    customHeaders?: object\n}\n\nexport class ZhipuAI {\n    public __esModule = false\n    public request: Request\n\n    constructor(private readonly options: ZhipuAIOptions) {\n        if (!options.apiKey) options.apiKey = process.env['ZHIPUAI_API_KEY'] || ''\n        assert.ok(options.apiKey, \"未提供api_key，请通过参数或环境变量提供\")\n        if (!options.baseUrl) options.baseUrl = process.env[\"ZHIPUAI_BASE_URL\"] || ''\n        if (!options.baseUrl) options.baseUrl = \"https://open.bigmodel.cn/api/paas/v4\"\n        this.request = new Request(this, {\n            timeout: options.timeout,\n            headers: options.customHeaders,\n            baseURL: options.baseUrl\n        });\n    }\n\n    public async post(url: string, data?: object, config?: AxiosRequestConfig<object>): Promise<AxiosResponse<any>> {\n        return this.request.post(url, data, config)\n    }\n\n    public async createCompletions(options: CreateCompletionsOptions): Promise<AxiosResponse<any>> {\n        return new Completions(this).create(options)\n    }\n\n    public authHeaders() {\n        const token = generateToken(this.options.apiKey)\n        return { \"Authorization\": token }\n    }\n}\n\nexport default ZhipuAI","import jsonwebtoken from \"jsonwebtoken\"\n\nconst API_TOKEN_TTL_SECONDS = 3 * 60\n\nexport const generateToken = (apiSecretKey: string) => {\n    try {\n        const [apiKey, secret] = apiSecretKey.split(\".\")\n        const payload = {\n            \"api_key\": apiKey,\n            \"exp\": Math.round(Date.now() * 1000) + API_TOKEN_TTL_SECONDS * 1000,\n            \"timestamp\": Math.round(Date.now() * 1000),\n        }\n        // algorithm = \"HS256\", headers = { \"alg\": \"HS256\", \"sign_type\": \"SIGN\" }\n        //@ts-ignore 不用管\n        const ret = jsonwebtoken.sign(payload, secret, {\n            algorithm: \"HS256\",\n            header: { alg: \"HS256\", sign_type: \"SIGN\" }\n        })\n        return ret\n    } catch (e) {\n        throw \"invalid api_key\"\n    }\n}","import { AxiosResponse } from \"axios\";\nimport ZhipuAI from \"./zhipu-ai.js\";\n\nexport type MessageOptions = {\n    role: \"system\" | \"user\" | \"assistant\" | \"function\"\n    content: string\n}\n\nexport type CreateCompletionsOptions = {\n    model: string,\n    messages: Array<MessageOptions>,\n    requestId?: string,\n    doSample?: boolean,\n    stream?: boolean,\n    temperature?: number,\n    topP?: number,\n    maxTokens?: number,\n    seed?: number,\n    stop?: Array<string>,\n    sensitiveWordCheck?: object,\n    tools?: object,\n    toolChoice?: string,\n    extraHeaders?: object,\n    disableStrictValidation?: boolean,\n    timeout?: number,\n}\n\nexport type ResponseMessage = {\n    id: string,\n    created: number,\n    model: string,\n    choices: Array<{\n        index: number,\n        finish_reason: string,\n        message: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        },\n        delta: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        }\n    }>,\n    usage: {\n        prompt_tokens: number,\n        completion_tokens: number,\n        total_tokens: number,\n    },\n}\n\nexport default class Completions {\n    constructor(private readonly app: ZhipuAI) {\n    }\n\n    public async create(options: CreateCompletionsOptions): Promise<AxiosResponse<ResponseMessage>> {\n        return this.app.post(\"/chat/completions\", {\n            \"model\": options.model,\n            \"request_id\": options.requestId,\n            \"temperature\": options.temperature,\n            \"top_p\": options.topP,\n            \"do_sample\": options.doSample,\n            \"max_tokens\": options.maxTokens,\n            \"seed\": options.seed,\n            \"messages\": options.messages,\n            \"stop\": options.stop,\n            \"sensitive_word_check\": options.sensitiveWordCheck,\n            \"stream\": options.stream,\n            \"tools\": options.tools,\n            \"tool_choice\": options.toolChoice,\n        }, {\n            headers: options.extraHeaders,\n            responseType: options.stream ? 'stream' : 'json'\n        })\n    }\n} ","import Axios, { AxiosInstance, CreateAxiosDefaults, AxiosResponse, AxiosRequestConfig } from \"axios\";\nimport ZhipuAI from \"./zhipu-ai\";\n\nexport default class Request {\n    public request: AxiosInstance\n\n    constructor(private readonly app: ZhipuAI, config: CreateAxiosDefaults) {\n        this.request = Axios.create(config)\n\n        this.request.interceptors.request.use((config) => {\n            config.headers.set(this.app.authHeaders())\n            return config;\n        })\n    }\n\n    async post<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R> {\n        return this.request.post(url, data, config)\n    }\n\n    async get<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R> {\n        return this.request.get(url, config)\n    }\n\n    async put<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R> {\n        return this.request.put(url, data, config)\n    }\n\n    async delete<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R> {\n        return this.request.delete(url, config)\n    }\n}"],"mappings":"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","names":["jsonwebtoken","Axios","config","assert"]}