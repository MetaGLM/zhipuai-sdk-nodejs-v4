{
  "version": 3,
  "sources": ["../../lib/completions.ts"],
  "sourcesContent": ["import { AxiosResponse } from \"axios\";\nimport ZhipuAI from \"./zhipu-ai.js\";\n\nexport type MessageOptions = {\n    role: \"system\" | \"user\" | \"assistant\" | \"function\"\n    content: string\n}\n\nexport type CreateCompletionsOptions = {\n    model: string,\n    messages: Array<MessageOptions>,\n    request_id?: string,\n    do_sample?: boolean,\n    stream?: boolean,\n    temperature?: number,\n    top_p?: number,\n    max_tokens?: number,\n    seed?: number,\n    stop?: Array<string>,\n    sensitive_word_check?: object,\n    tools?: object,\n    tool_choice?: string,\n    extra_headers?: object,\n    disable_strict_validation?: boolean,\n    timeout?: number,\n}\n\nexport type ResponseMessage = {\n    id: string,\n    created: number,\n    model: string,\n    choices: Array<{\n        index: number,\n        finish_reason: string,\n        message: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        },\n        delta: {\n            role: string,\n            content: string,\n            tool_calls: Array<{\n                id: string,\n                type: string,\n                function: {\n                    name: string,\n                    arguments: object,\n                }\n            }>\n        }\n    }>,\n    usage: {\n        prompt_tokens: number,\n        completion_tokens: number,\n        total_tokens: number,\n    },\n}\n\nexport default class Completions {\n    constructor(private readonly app: ZhipuAI) {\n    }\n\n    public async create(options: CreateCompletionsOptions): Promise<AxiosResponse<ResponseMessage>> {\n        return this.app.post(\"/chat/completions\", {\n            \"model\": options.model,\n            \"request_id\": options.request_id,\n            \"temperature\": options.temperature,\n            \"top_p\": options.top_p,\n            \"do_sample\": options.do_sample,\n            \"max_tokens\": options.max_tokens,\n            \"seed\": options.seed,\n            \"messages\": options.messages,\n            \"stop\": options.stop,\n            \"sensitive_word_check\": options.sensitive_word_check,\n            \"stream\": options.stream,\n            \"tools\": options.tools,\n            \"tool_choice\": options.tool_choice,\n        }, {\n            headers: options.extra_headers,\n            responseType: options.stream ? 'stream' : 'json'\n        })\n    }\n} "],
  "mappings": ";AAkEA,qBAAqB,YAAY;AAAA,EAC7B,YAA6B,KAAc;AAAd;AAAA,EAC7B;AAAA,EAEA,MAAa,OAAO,SAA4E;AAC5F,WAAO,KAAK,IAAI,KAAK,qBAAqB;AAAA,MACtC,SAAS,QAAQ;AAAA,MACjB,cAAc,QAAQ;AAAA,MACtB,eAAe,QAAQ;AAAA,MACvB,SAAS,QAAQ;AAAA,MACjB,aAAa,QAAQ;AAAA,MACrB,cAAc,QAAQ;AAAA,MACtB,QAAQ,QAAQ;AAAA,MAChB,YAAY,QAAQ;AAAA,MACpB,QAAQ,QAAQ;AAAA,MAChB,wBAAwB,QAAQ;AAAA,MAChC,UAAU,QAAQ;AAAA,MAClB,SAAS,QAAQ;AAAA,MACjB,eAAe,QAAQ;AAAA,IAC3B,GAAG;AAAA,MACC,SAAS,QAAQ;AAAA,MACjB,cAAc,QAAQ,SAAS,WAAW;AAAA,IAC9C,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
